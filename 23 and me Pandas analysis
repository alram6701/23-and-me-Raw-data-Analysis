import pandas as pd
import re
import matplotlib.pyplot as plt
import numpy as np

# Load and process SNPs matched data
genome = pd.read_csv("gene.txt", sep="\t", comment="#", header=None, na_values="--").dropna()
genome.columns = ["rs", "chrom", "loci", "genotype"]
genome.set_index("rs", inplace=True)

genome.chrom = genome.chrom.astype(str)

# Create unique identifier for matching SNPs
rsthing = genome.apply(
    lambda row: row.name + f"({';'.join(row.genotype)})",
    axis=1)

genome.loc[:, "match_key"] = rsthing

# Load all SNPs data and match with genetic data
all_snps = pd.read_csv("all-snps.csv", index_col="snp")
matches = genome.join(all_snps, on="match_key", how="inner")
matches.to_csv("matchedsnps.csv")

# Load genetic data for two individuals
genome_person1 = pd.read_csv("person1matched-snps.csv",
                             comment="#",
                             index_col="match_key",
                             na_values="--").dropna()

genome_person2 = pd.read_csv("person2matched-snps.csv",
                             comment="#",
                             index_col="match_key",
                             na_values="--").dropna()

# Identify different and common SNPs between individuals
different_person1 = genome_person1.index.difference(genome_person2.index)
different_person2 = genome_person2.index.difference(genome_person1.index)
same = genome_person1.index.intersection(genome_person2.index)

# Combine different SNPs with corresponding individual label
different_personS = pd.concat([
    genome_person2.loc[different_person2, :],
    genome_person1.loc[different_person1, :],
])
different_personS.loc[:, "person"] = different_personS.index.map(
    lambda i: "person2" if i in genome_person2.index else "person1"
)

# Display different SNPs and save to files
print(different_personS)
common_person12 = genome_person2.loc[same, :]
common_person12.to_csv("common_person1-person2.csv")
different_personS.to_csv("different_person2-person1.csv")

# Group genetic data by chromosome
chrom = {k: y for k, y in genome.groupby('chrom')}
chrom.keys()

# Load raw genomic data and process chromosome information
rawgenome = pd.read_csv("rawgenome.txt", sep="\t", comment="#", dtype=str, na_values="--").dropna()
rawgenome.columns = ["rs", "chrom", "loci", "genotype"]

chrom = rawgenome.chrom.unique()

# Analyze mitochondrial chromosome data
sex = "Male" if 'Y' in chrom else "Female"
print(sex)

yomama = rawgenome.loc[rawgenome['chrom'] == 'MT']
print(yomama)

yomutantmama = genome.loc[genome['chrom'] == 'MT']

if yomutantmama.empty:
    print("Mitochondrial genome is healthy")
else:
    print("Mitochondrial genome has mutations")

# Exclusively analyze genetic data from father's Y chromosome
dad = rawgenome[rawgenome['chrom'] == 'Y']
print(dad)
len(dad)

# Chromosome and SNP Chart Analysis
Allnumberschrom = ['1', '2', '3', '4', '5',
                   '6', '7', '8', '9', '10',
                   '11', '12', '13', '14',
                   '15', '16', '17', '18',
                   '19', '20', '21', '22',
                   'X', 'Y', 'MT']

# Set chromosome data types for ordered categorical display
chrom_cat = pd.api.types.CategoricalDtype(categories=Allnumberschrom, ordered=True)
rawgenome.chrom = rawgenome.chrom.astype(chrom_cat)

# Sort and visualize SNP count per chromosome
rawgenome.sort_values('chrom')
rawgenome["chrom"].value_counts()

rs_per_chromosome_series = rawgenome.groupby('chrom')['rs'].count()
rs_per_chromosome_series.columns = ['chrom', 'rs']

plt.figure(figsize=(14,9))
plt.bar(rs_per_chromosome_series.index, rs_per_chromosome_series.values, color='#0072BD')
plt.title("SNPs in Chromosomes", fontsize=16)
plt.xlabel("Chromosome", fontsize=14)
plt.ylabel("SNPs", fontsize=14)
plt.show()

# Enum class for Eye Color
class EyeColor(Enum):
    UNDEFINED = 0
    BLUE = 1
    GREEN = 2
    BROWN = 3

# Analyze specific genetic traits (Eye Color, Intelligence, etc.)
IntQ = genome.loc[genome['rs'].isin(['rs4680', 'rs1745575','rs1535','rs17070145'])]
blood = genome.loc[genome['rs'].isin(['rs1058396','rs7853989'])]
print(blood['Summary'])

height = genome.loc[genome['match_key'] == 'rs1799971(A;A)']
if height.empty:
    print("Shorter than average")
else:
    print("Average height")

# Categorize eye color based on genetic data
eyes = EyeColor.UNDEFINED
brown_eyes_pos = [['rs12913832(A;A)'], 
                  ['rs12896399(G;G)'], 
                  # ... (Other SNP combinations)
                 ]
genome_brown_eyes = pd.DataFrame(brown_eyes_pos, columns=["match_key"], dtype=str)

# Merge genetic data with specific SNP combinations for eye color
genome_match_brown_eyes = pd.merge(left=genome, right=genome_brown_eyes, how='inner',
                                   left_on=["match_key"], right_on=["match_key"])
print(genome_match_brown_eyes)

# Determine and print eye color based on matched SNPs
if genome_match_brown_eyes.shape[0] >= 1:
    eyes = EyeColor.BROWN

if eyes == EyeColor.BROWN:    
    print('You have BROWN eyes')
else:
    print('You do not have BROWN eyes')
# Analyze and categorize blue eye color based on genetic data
blue_eye_pos = [['rs12913832(G;G)'],
               # ... (Other SNP combinations)
              ]
genome_blue_eyes = pd.DataFrame(blue_eye_pos, columns=["match_key"])

genome_match_blue_eyes = pd.merge(left=genome,
                                   right=genome_blue_eyes, how='inner',
                                   left_on=["match_key"], right_on=["match_key"])

print(genome_match_blue_eyes)

# Determine and print blue eye color based on matched SNPs
if genome_match_blue_eyes.shape[0] >= 1:
    eyes = EyeColor.BLUE

if eyes == EyeColor.BLUE:    
    print('You could have Blue eyes')
else:
    print('You do not have Blue eyes')

# Analyze and categorize green eye color based on genetic data
green_eye_pos = [['rs12913832(A;A)'], 
                   # ... (Other SNP combinations)
               ]
genome_green_eyes = pd.DataFrame(green_eye_pos, columns=["match_key"])

genome_match_green_eyes = pd.merge(left=genome,
                                   right=genome_green_eyes, how='inner',
                                   left_on=["match_key"], right_on=["match_key"])

print(genome_match_green_eyes)

# Determine and print green eye color based on matched SNPs
if genome_match_green_eyes.shape[0] >= 1:
    eyes = EyeColor.GREEN

if eyes == EyeColor.GREEN:    
    print('You could have green eyes')
else:
    print('You do not have green eyes')

# Print the final determined eye color
print(f"You have {eyes.name.lower()} eyes.")

# Define a function to categorize eye color based on SNP combinations
def color_eyes(brown_eye, blue_eye, green_eye):
    if brown_eye:
        return "brown"
    if green_eye:
        return "green"
    if blue_eye:
        return "blue"
    else:
        return "undefined"

# Call the function to categorize eye color based on SNP data
eyes = [color_eyes(brown_eye, blue_eye, green_eye)]

# Print the final determined eye color based on SNP data
print(f"You are probably {sex} with {eyes} eye color.\n"
      "Height related:\n"
      f"{height.loc[:, ['rs', 'Summary']]}\n"
      "Intelligence: \n"
      f"{IntQ['Summary']}")

# Trait Analysis - Alcoholism
alc = genome.loc[genome['match_key'] == 'rs1799971(A;A)']
if alc.empty:
    print("You have an increased risk of developing alcoholism")
else:
    print("You do not have an increased risk of developing alcoholism")

# Trait Analysis - Cancer Risk
bad_genes = genome[genome.Repute == 'Bad']
cancer_risk = bad_genes[bad_genes["Summary"].str.contains("cancer", na=False)]
print(cancer_risk)
print(len(cancer_risk))

# Trait Analysis - Dementia Risk
dementia = genome[genome["Summary"].str.contains("dementia", na=False)]
print(dementia)

# Analyze exclusive SNPs on the Y chromosome (Sons)
son = genome[genome['chrom'] == 'Y']
print(son)
print(len(son))

# Categorize genes into different categories (good, bad, significant)
good_genes = genome[genome.Repute == 'Good']
bad_genes = genome[genome.Repute == 'Bad']
sig_genes = genome[genome.Magnitude > 3]

print(sig_genes)
